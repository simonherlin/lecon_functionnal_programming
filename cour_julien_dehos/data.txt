Programmation fonctionnelle :
=> Paradigmes de programmation tout comme le procédural et l'objet

    principe : imbrication de fonctions sans effet de bord
    intérêts : expressivité, découplage du code, réduction des sources d’erreurs, preuve de correction, concurrence…
    applications : compilateurs, web back-end, script…
    caractéristiques : fonctions d’ordre supérieur, récursivité, listes, garbage collector…
    regain d’intérêt : Erlang, XSLT, F#, Scala, C++11
    langages fonctionnels : type Lisp, type ML

=> Système de type

Type de données

    ensemble des valeurs possibles et opérations autorisées
    toute donnée ou expression possède un type

Le typage en Haskell

    typage statique fort
    typage par inférence
    types polymorphes
    classes de types
    types élémentaires de base (Bool, Int, Double…)
    types composés (tuples, listes…)

Typage faible/fort, statique/dynamique

    typage faible/fort :

            termes souvent utilisés mais pas de définition unanime
            traduit l’exigence du compilateur lors de la vérification de type

    typage statique/dynamique :

            statique : vérification de type à la compilation
            dynamique : vérification de type à l’exécution

    principales écoles :

            typage statique fort (haskell, ada…) : fiabilité, performance
            typage dynamique (lisp, python…) : programmation interactive

=> Listes

    suite d’éléments de même type et de taille quelconque (éventuellement infinie)
    liste vide : []
    opérateur de construction : :
    syntaxe simplifiée : accolades + virgules
    fonctions prédéfinies : head length null reverse elem take drop...
    opérateurs : ++  !!


Algorithme récursifs :
Un algorithme récursifs est un algorithme qui fait appels à lui-même dans le corps de sa propre définition

Il existe deux types d’algorithmes récursifs :
    les algorithmes récursifs qui se terminent :
        au bout d’un nombre fini d’op ́erations, l’algorithme s’arrˆete.
    les algorithmes récursifs qui ne se terminent pas :
        on peut imaginer que l’algorithme continue ” ́eternellement” de calculer.

Structure de données :
    Structure logique destinée à contenir les données

Types de données abstraite
    Description des fonctions admissibles sur les données
    (et non pas directement sur les structures de données)


Récursivité terminale

    l’appel récursif fournit directement la valeur de retour
    intérêt : coût mémoire constant (pas d’empilement des appels récursifs)
    exemple de récursivité non-terminale (exemple précédent) :

    taille :: [Int] -> Int
    taille [] = 0
    taille (x:xs) = 1 + (taille xs)

    main = print $ taille [1..42]

    exemple équivalent en récursivité terminale :

    taille' :: [Int] -> Int -> Int
    taille' [] n = n
    taille' (x:xs) n = taille' xs (n+1)

    main = print $ taille' [1..42] 0

Savoir différencier une structure de donnée d’un type de donnée abstrait

    Type de données abstraite (TDA)
    Description des fonctions admissibles sur les données
    (et non pas directement sur les structures de données)

    Structure de données
    Structure logique destinée à contenir les données

    Une structure de données implémente un TDA

Savoir définir le type de donnée abstrait liste

    5 primitives sont nécessaire pour définir le TDA :
    listeVide : () → liste
        retourne la liste vide
    listeCons : element × liste → liste
        ajoute un  ́el ́ement `a une liste
    listeTete : liste → element
        retourne l’élément en tête de la liste (si elle n’est pas vide !)
    listeQueue : liste → liste
        retourne la queue de la liste (si elle n’est pas vide !)
    listeEstVide? : liste → boolean
        teste si la liste est vide


Savoir utiliser les listes en Haskell

    longueur :: [ a ] -> Int
    longueur [] = 0
    longueur (h:t) = longueur t + 1

    mysum :: Num a => [ a ] -> a
    mysum [] = 0
    mysum (h:t) = mysum t + h

    concatenationMots :: [ String ] -> String
    concatenationMots [] = ""
    concatenationMots (h:t) = h ++ concatenationMots t

    pair :: Integral a => [ a ] -> [ a ]
    pair [] = []
    pair (h:t)  | mod h 2 == 0 = (h : (pair t))
                | otherwise = pair t

    myconcat :: [ a ] -> [ a ] -> [ a ]
    myconcat [] l = l
    myconcat (h:t) l = ( h : (myconcat t l) )

    ajouter :: a -> Int -> [ a ] -> [ a ]
    ajouter elem 0 l = (elem : l)
    ajouter elem n (h:t) = (h : (ajouter elem (n-1) t))

    supprimer :: Int -> [ a ] -> [ a ]
    supprimer _ [] = []
    supprimer 0 (h:t) = t
    supprimer n (h:t) = ( h : (supprimer (n-1) t) )



Connaitre le schéma r ́ecursif du traitement d’une liste
    En haut

Connaitre les algorithmes classiques relatifs aux listes
    en haut
Savoir ́ecrire une fonction de calcul avec accumulateur, 
    de création, de modification, de filtre avec une liste
    en haut

Savoir définir une fonction anonyme

    Fonction sans nom
    simplifie l’usage des fonctions (par exemple, pour passer une fonction en paramètre…)
    également appelé «lambda», en référence au lambda-calcul

Savoir définir une fonction d'ordre supérieur

    En mathématiques et en informatique, les fonctions d'ordre supérieur ou fonctionnelles sont des fonctions qui ont au moins une des propriétés suivantes :

        elles prennent une ou plusieurs fonctions en entrée ;
        elles renvoient une fonction.

Savoir définir une fonction dont le résultat est une fonction

    addOne =
    \x -> x + 1
    addOne 3
    4

Connaitre et savoir utiliser les fonctions d'ordre supérieur prédéfinie

